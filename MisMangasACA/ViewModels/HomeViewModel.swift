//
// HomeViewModel.swift
// MisMangasACA
//
// Gestiona la l√≥gica de negocio para la pantalla Home:
// carga ‚Äúbest mangas‚Äù con paginaci√≥n infinita.
//

import Foundation
import Combine

@MainActor
final class HomeViewModel: ObservableObject {
    // Servicio inyectable (por defecto el singleton compartido)
    private let api: APIService

    // MARK: ‚Äì Entrada
    @Published var mangas: [MangaDTO] = []
    @Published var isLoadingPage = false
    @Published var isLastPage = false
    @Published var currentPage = 1
    @Published var genres: [String] = []
    @Published var selectedGenre: String?
    private let perPage = 20
    
    private var canLoadMore: Bool { !isLastPage }
    
    // MARK: ‚Äì Init
    init(api: APIService = .shared) {
        self.api = api
    }
    
    // MARK: ‚Äì Carga inicial y siguientes p√°ginas
    func loadNextPageIfNeeded(currentItem: MangaDTO?) async {
        guard let item = currentItem else {
            await loadPage(1)
            return
        }
        // Si el √≠tem actual es el √∫ltimo de la lista y hay m√°s p√°ginas...
        if mangas.last?.id == item.id && !isLoadingPage {
            await loadPage(currentPage + 1)
        }
    }
    
func loadPage(_ page: Int, forceReload: Bool = false) async {
        guard (!isLoadingPage && !isLastPage) || forceReload else { return }
        isLoadingPage = true
        defer { isLoadingPage = false }
        
        do {
            let response = try await api.fetchBestMangas(
                page: page,
                per: perPage
            )
            // 1. Actualiza la lista
            if page == 1 {
                mangas = response.data
            } else {
                mangas.append(contentsOf: response.data)
            }

            // 2. Actualiza el estado de paginaci√≥n
            currentPage = response.metadata.page
            isLastPage  = response.data.isEmpty
        } catch let decodingError as DecodingError {
            // üõë Error de decodificaci√≥n: probablemente shape inesperado del JSON
            print("‚ùå Decoding error:", decodingError)
            // Evita un loop infinito intentando la misma p√°gina
            isLastPage = true
        } catch {
            // Otros errores: red, URL, etc.
            print("Error loading page \(page): \(error)")
        }
    }
    /// Busca mangas cuyo t√≠tulo contenga el texto dado, usando el endpoint de la API.
    /// Si la consulta est√° vac√≠a, recarga el listado de best mangas.
    func searchMangas(with query: String) async {
        let trimmed = query.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmed.isEmpty else {
            // Si la b√∫squeda est√° vac√≠a, mostramos el top inicial
            await loadPage(1)
            return
        }
        isLoadingPage = true
        defer { isLoadingPage = false }
        do {
            let response = try await api.searchMangasContains(trimmed, page: 1, per: perPage)
            mangas = response.data
            currentPage = 1
            isLastPage = response.data.isEmpty
        } catch {
            print("Error al buscar mangas: \(error)")
            // Opcional: podr√≠as exponer un mensaje de error a la UI aqu√≠
        }
    }
}

// MARK: - Filtro por g√©nero (usando String)
extension HomeViewModel {
    /// Carga todos los g√©neros disponibles desde la API (como array de String)
    func loadGenres() async {
        do {
            genres = try await api.fetchGenres()
        } catch {
            print("Error al cargar g√©neros: \(error)")
        }
    }

    /// Carga mangas de un g√©nero espec√≠fico usando el endpoint paginado /list/mangaByGenre/{genre}.
    /// Ahora permite paginaci√≥n infinita e integra el control de p√°gina y √∫ltima p√°gina.
    func loadMangasByGenre(_ genre: String, page: Int = 1, forceReload: Bool = false) async {
        guard (!isLoadingPage && !isLastPage) || forceReload else { return }
        isLoadingPage = true
        defer { isLoadingPage = false }

        do {
            // Trae la p√°gina solicitada de mangas por g√©nero
            let response = try await api.fetchMangasByGenre(genre, page: page, per: perPage)
            if page == 1 || forceReload {
                mangas = response.data
            } else {
                mangas.append(contentsOf: response.data)
            }
            currentPage = response.metadata.page
            // Si no hay m√°s resultados, se marca como √∫ltima p√°gina
            isLastPage = response.data.isEmpty
            selectedGenre = genre
        } catch {
            #if DEBUG
            print("Error al buscar mangas por g√©nero: \(error.localizedDescription)")
            #endif
            // Marca como √∫ltima p√°gina para evitar loops infinitos en caso de error grave
            isLastPage = true
        }
    }
}
